name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Auto increment version
        id: version
        run: |
          # 현재 버전 가져오기
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "previous_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # 버전을 0.0.1 증가
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # package.json 업데이트
          npm version $NEW_VERSION --no-git-tag-version

      - name: Build application
        run: npm run build

      - name: Build release packages
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          # 이전 태그 찾기
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
          else
            echo "Previous tag: $PREV_TAG"
            echo "Current HEAD: $(git rev-parse HEAD)"
            COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %s" --no-merges)
            echo "Found $(echo "$COMMITS" | wc -l) commits"
          fi

          echo "All commits:"
          echo "$COMMITS"

          # 변경사항을 카테고리별로 분류
          FEATURES=$(echo "$COMMITS" | grep -iE "^- (feat|feature)" || true)
          FIXES=$(echo "$COMMITS" | grep -i "^- fix" || true)
          REFACTORS=$(echo "$COMMITS" | grep -i "^- refactor" || true)
          DOCS=$(echo "$COMMITS" | grep -i "^- docs" || true)
          CHORES=$(echo "$COMMITS" | grep -iE "^- (chore|build|ci)" || true)
          OTHERS=$(echo "$COMMITS" | grep -ivE "^- (feat|feature|fix|refactor|docs|chore|build|ci)" || true)

          # 변경사항 생성
          CHANGELOG=""

          if [ -n "$FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### ✨ 새로운 기능\n${FEATURES}\n\n"
          fi

          if [ -n "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### 🐛 버그 수정\n${FIXES}\n\n"
          fi

          if [ -n "$REFACTORS" ]; then
            CHANGELOG="${CHANGELOG}### ♻️ 리팩토링\n${REFACTORS}\n\n"
          fi

          if [ -n "$DOCS" ]; then
            CHANGELOG="${CHANGELOG}### 📝 문서\n${DOCS}\n\n"
          fi

          if [ -n "$CHORES" ]; then
            CHANGELOG="${CHANGELOG}### 🔧 빌드/기타\n${CHORES}\n\n"
          fi

          if [ -n "$OTHERS" ]; then
            CHANGELOG="${CHANGELOG}### 기타 변경사항\n${OTHERS}\n\n"
          fi

          # 변경사항이 없으면 전체 커밋 표시
          if [ -z "$CHANGELOG" ]; then
            if [ -n "$COMMITS" ]; then
              CHANGELOG="### 변경사항\n${COMMITS}\n"
            else
              CHANGELOG="- 내부 개선 및 버그 수정"
            fi
          fi

          # GitHub Output으로 전달 (멀티라인 처리)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            release/Key-ti-${{ steps.version.outputs.version }}-distribution.zip
            release/latest-mac.yml
          body: |
            ## 🚀 Key-ti v${{ steps.version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ---

            ### 📦 설치 방법
            1. `Key-ti-${{ steps.version.outputs.version }}-distribution.zip` 다운로드
            2. 압축 해제
            3. 터미널에서 `./install.sh` 실행

            ### 🔄 업데이트
            기존 사용자는 앱 실행 시 자동으로 업데이트 알림을 받습니다.

            ---

            📝 **전체 변경사항**: https://github.com/kiduko/key-ti/compare/v${{ steps.version.outputs.previous_version }}...v${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit version change
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push
